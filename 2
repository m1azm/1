local v0 = tonumber;
local v1 = string.byte;
local v2 = string.char;
local v3 = string.sub;
local v4 = string.gsub;
local v5 = string.rep;
local v6 = table.concat;
local v7 = table.insert;
local v8 = math.ldexp;
local v9 = getfenv or function()
	return _ENV;
end;
local v10 = setmetatable;
local v11 = pcall;
local v12 = select;
local v13 = unpack or table.unpack;
local v14 = tonumber;
local function v15(v16, v17, ...)
	local v18 = 1;
	local v19;
	v16 = v4(v3(v16, 5), "..", function(v30)
		if (v1(v30, 2) == 79) then
			local v81 = 0;
			while true do
				if (v81 == 0) then
					v19 = v0(v3(v30, 1, 1));
					return "";
				end
			end
		else
			local v82 = 0;
			local v83;
			while true do
				if (v82 == 0) then
					v83 = v2(v0(v30, 16));
					if v19 then
						local v98 = v5(v83, v19);
						v19 = nil;
						return v98;
					else
						return v83;
					end
					break;
				end
			end
		end
	end);
	local function v20(v31, v32, v33)
		if v33 then
			local v84 = (v31 / ((5 - 3) ^ (v32 - (2 - (878 - (282 + 595)))))) % (((1640 - (1523 + 114)) - 1) ^ (((v33 - 1) - (v32 - (2 - 1))) + (620 - (555 + 64))));
			return v84 - (v84 % ((838 + 94) - (857 + 74)));
		else
			local v85 = ((812 - 242) - (367 + 201)) ^ (v32 - (928 - (214 + 713)));
			return (((v31 % (v85 + v85)) >= v85) and (1 + 0)) or ((1065 - (68 + 997)) + 0);
		end
	end
	local function v21()
		local v34 = 1270 - (226 + 1044);
		local v35;
		while true do
			if (v34 == (4 - 3)) then
				return v35;
			end
			if (v34 == (117 - (32 + 85))) then
				v35 = v1(v16, v18, v18);
				v18 = v18 + (958 - (892 + 65)) + 0;
				v34 = 1 + (0 - 0);
			end
		end
	end
	local function v22()
		local v36, v37 = v1(v16, v18, v18 + (3 - 1));
		v18 = v18 + (3 - 1);
		return (v37 * (606 - (87 + 263))) + v36;
	end
	local function v23()
		local v38, v39, v40, v41 = v1(v16, v18, v18 + 3);
		v18 = v18 + (184 - (67 + 113));
		return (v41 * ((48895243 - 36592966) + (4475891 - (802 + 150)))) + (v40 * (160901 - 95365)) + (v39 * (189 + 67)) + v38;
	end
	local function v24()
		local v42 = 0 - (772 - (201 + 571));
		local v43;
		local v44;
		local v45;
		local v46;
		local v47;
		local v48;
		while true do
			if (v42 == 1) then
				v45 = 1;
				v46 = (v20(v44, (1139 - (116 + 1022)) - 0, 15 + 5) * ((999 - (915 + 82)) ^ (90 - (241 - 183)))) + v43;
				v42 = 2 + 0;
			end
			if (v42 == 3) then
				if (v47 == (0 - (0 + 0))) then
					if (v46 == ((4333 - 3146) - (1069 + 118))) then
						return v48 * (0 - 0);
					else
						local v99 = 0 - 0;
						while true do
							if (v99 == (0 + 0)) then
								v47 = 1 - 0;
								v45 = 0 + 0;
								break;
							end
						end
					end
				elseif (v47 == 2047) then
					return ((v46 == 0) and (v48 * ((792 - (368 + 423)) / (0 - 0)))) or (v48 * NaN);
				end
				return v8(v48, v47 - (1041 - ((35 - 25) + 8))) * (v45 + (v46 / ((7 - 5) ^ 52)));
			end
			if (v42 == (444 - (416 + 26))) then
				v47 = v20(v44, 66 - 45, 14 + (876 - (814 + 45)));
				v48 = ((v20(v44, 56 - (58 - 34)) == (439 - (145 + 16 + 277))) and -(431 - (44 + 386))) or (1487 - (998 + 488));
				v42 = 1 + 2;
			end
			if (v42 == (0 + 0)) then
				v43 = v23();
				v44 = v23();
				v42 = 1 + 0;
			end
		end
	end
	local function v25(v49)
		local v50 = 885 - (261 + 624);
		local v51;
		local v52;
		while true do
			if (v50 == (3 - 1)) then
				v52 = {};
				for v89 = 1081 - (1020 + (1807 - (760 + 987))), #v51 do
					v52[v89] = v2(v1(v3(v51, v89, v89)));
				end
				v50 = 1426 - (630 + 793);
			end
			if (v50 == 0) then
				v51 = nil;
				if not v49 then
					v49 = v23();
					if (v49 == (0 - 0)) then
						return "";
					end
				end
				v50 = 1;
			end
			if ((14 - 11) == v50) then
				return v6(v52);
			end
			if (v50 == (1 + 0)) then
				v51 = v3(v16, v18, (v18 + v49) - ((1916 - (1789 + 124)) - (768 - (745 + 21))));
				v18 = v18 + v49;
				v50 = 2;
			end
		end
	end
	local v26 = v23;
	local function v27(...)
		return {...}, v12("#", ...);
	end
	local function v28()
		local v53 = 0;
		local v54;
		local v55;
		local v56;
		local v57;
		local v58;
		local v59;
		while true do
			local v66 = 341 - (218 + 123);
			while true do
				if (0 == v66) then
					if ((8 - 6) == v53) then
						for v100 = 1 - 0, v23() do
							local v101 = 0;
							local v102;
							while true do
								if ((0 + 0) ~= v101) then
								else
									v102 = v21();
									if (v20(v102, 1519 - (1191 + 327), 1 + 0) ~= (698 - (208 + 490))) then
									else
										local v110 = 0 + 0;
										local v111;
										local v112;
										local v113;
										while true do
											if (v110 ~= (3 - 1)) then
											else
												if (v20(v112, 1 + 0, 837 - (660 + 176)) ~= (1 + 0)) then
												else
													v113[2 + 0] = v59[v113[4 - 2]];
												end
												if (v20(v112, 204 - (14 + 188), 2) ~= 1) then
												else
													v113[3] = v59[v113[3]];
												end
												v110 = 293 - (60 + 230);
											end
											if (v110 ~= (678 - (534 + 141))) then
											else
												if (v20(v112, 2 + 1, 3) == (1 + 0)) then
													v113[4 + 0] = v59[v113[8 - 4]];
												end
												v54[v100] = v113;
												break;
											end
											if (v110 == (0 - 0)) then
												local v152 = 0 - 0;
												while true do
													if (v152 == (1 + 0)) then
														v110 = 1025 - (706 + 318);
														break;
													end
													if (v152 ~= 0) then
													else
														v111 = v20(v102, 5 - 3, 3);
														v112 = v20(v102, 4, 4 + 2);
														v152 = 1 + 0;
													end
												end
											end
											if (v110 == (2 - 1)) then
												local v153 = 396 - (115 + 281);
												while true do
													if (v153 == (2 - 1)) then
														v110 = 2 + 0;
														break;
													end
													if (v153 == (700 - (271 + 429))) then
														v113 = {v22(),v22(),nil,nil};
														if (v111 == (0 - 0)) then
															local v371 = 867 - (550 + 317);
															while true do
																if (v371 == (0 - 0)) then
																	v113[1291 - (993 + 295)] = v22();
																	v113[4 - 0] = v22();
																	break;
																end
															end
														elseif (v111 == 1) then
															v113[3] = v23();
														elseif (v111 == (5 - 3)) then
															v113[288 - (134 + 151)] = v23() - (2 ^ (1681 - (970 + 695)));
														elseif (v111 == (1 + 2)) then
															local v419 = 0 - 0;
															local v420;
															while true do
																if ((0 + 0) == v419) then
																	v420 = 1990 - (582 + 1408);
																	while true do
																		if (v420 ~= (0 - 0)) then
																		else
																			v113[3 - 0] = v23() - ((7 - 5) ^ (1840 - (1195 + 629)));
																			v113[5 - 1] = v22();
																			break;
																		end
																	end
																	break;
																end
															end
														end
														v153 = 242 - (187 + 54);
													end
												end
											end
										end
									end
									break;
								end
							end
						end
						for v103 = 781 - (162 + 618), v23() do
							v55[v103 - 1] = v28();
						end
						return v57;
					end
					if (v53 == (1 + 0)) then
						v58 = v23();
						v59 = {};
						for v105 = 1 + 0, v58 do
							local v106 = 0;
							local v107;
							local v108;
							local v109;
							while true do
								if (v106 ~= (1145 - (466 + 679))) then
								else
									v107 = 0;
									v108 = nil;
									v106 = 1;
								end
								if (v106 == (1 + 0)) then
									v109 = nil;
									while true do
										if (v107 ~= (2 - 1)) then
										else
											if (v108 == (1 - 0)) then
												v109 = v21() ~= 0;
											elseif (v108 == (2 - 0)) then
												v109 = v24();
											elseif (v108 == (1 + 2)) then
												v109 = v25();
											end
											v59[v105] = v109;
											break;
										end
										if (v107 == 0) then
											local v115 = 0;
											while true do
												if (v115 ~= 1) then
												else
													v107 = 2 - 1;
													break;
												end
												if (v115 == (0 + 0)) then
													v108 = v21();
													v109 = nil;
													v115 = 1637 - (1373 + 263);
												end
											end
										end
									end
									break;
								end
							end
						end
						v57[1003 - (451 + 549)] = v21();
						v53 = 2;
					end
					v66 = 585 - (57 + 527);
				end
				if (v66 ~= (1 + 0)) then
				else
					if (v53 == (103 - (17 + 86))) then
						local v96 = 0;
						local v97;
						while true do
							if ((0 + 0) ~= v96) then
							else
								v97 = 0;
								while true do
									if (v97 == 0) then
										v54 = {};
										v55 = {};
										v97 = 1 - 0;
									end
									if (v97 == (1 - 0)) then
										v56 = {};
										v57 = {v54,v55,nil,v56};
										v97 = 1 + 1;
									end
									if ((168 - (122 + 44)) == v97) then
										v53 = 1 - 0;
										break;
									end
								end
								break;
							end
						end
					end
					break;
				end
			end
		end
	end
	local function v29(v60, v61, v62)
		local v63 = v60[1];
		local v64 = v60[2];
		local v65 = v60[3];
		return function(...)
			local v67 = v63;
			local v68 = v64;
			local v69 = v65;
			local v70 = v27;
			local v71 = 1;
			local v72 = -1;
			local v73 = {};
			local v74 = {...};
			local v75 = v12("#", ...) - 1;
			local v76 = {};
			local v77 = {};
			for v86 = 0, v75 do
				if (v86 >= v69) then
					v73[v86 - v69] = v74[v86 + 1];
				else
					v77[v86] = v74[v86 + 1];
				end
			end
			local v78 = (v75 - v69) + 1;
			local v79;
			local v80;
			while true do
				v79 = v67[v71];
				v80 = v79[1];
				if (v80 <= 51) then
					if (v80 <= 25) then
						if (v80 <= 12) then
							if (v80 <= 5) then
								if (v80 <= 2) then
									if (v80 <= 0) then
										v77[v79[2]][v79[3]] = v77[v79[4]];
									elseif (v80 > 1) then
										if (v77[v79[2]] == v77[v79[4]]) then
											v71 = v71 + 1;
										else
											v71 = v79[3];
										end
									else
										v77[v79[2]][v79[3]] = v79[4];
									end
								elseif (v80 <= 3) then
									if v77[v79[2]] then
										v71 = v71 + 1;
									else
										v71 = v79[3];
									end
								elseif (v80 > 4) then
									local v169 = 0;
									local v170;
									local v171;
									local v172;
									while true do
										if (v169 == 0) then
											v170 = v79[2];
											v171 = v77[v170];
											v169 = 1;
										end
										if (v169 == 1) then
											v172 = v77[v170 + 2];
											if (v172 > 0) then
												if (v171 > v77[v170 + 1]) then
													v71 = v79[3];
												else
													v77[v170 + 3] = v171;
												end
											elseif (v171 < v77[v170 + 1]) then
												v71 = v79[3];
											else
												v77[v170 + 3] = v171;
											end
											break;
										end
									end
								else
									v77[v79[2]] = v77[v79[3]] - v79[4];
								end
							elseif (v80 <= 8) then
								if (v80 <= 6) then
									do
										return;
									end
								elseif (v80 == 7) then
									local v174 = 0;
									local v175;
									while true do
										if (v174 == 0) then
											v175 = v79[2];
											v77[v175] = v77[v175](v77[v175 + 1]);
											break;
										end
									end
								elseif (v77[v79[2]] <= v77[v79[4]]) then
									v71 = v71 + 1;
								else
									v71 = v79[3];
								end
							elseif (v80 <= 10) then
								if (v80 == 9) then
									local v176 = v79[2];
									do
										return v13(v77, v176, v72);
									end
								else
									v77[v79[2]] = v77[v79[3]] / v77[v79[4]];
								end
							elseif (v80 > 11) then
								if (v77[v79[2]] ~= v79[4]) then
									v71 = v71 + 1;
								else
									v71 = v79[3];
								end
							else
								v77[v79[2]] = v77[v79[3]] / v79[4];
							end
						elseif (v80 <= 18) then
							if (v80 <= 15) then
								if (v80 <= 13) then
									v77[v79[2]] = v77[v79[3]];
								elseif (v80 == 14) then
									local v179 = v79[2];
									local v180, v181 = v70(v77[v179](v77[v179 + 1]));
									v72 = (v181 + v179) - 1;
									local v182 = 0;
									for v308 = v179, v72 do
										v182 = v182 + 1;
										v77[v308] = v180[v182];
									end
								elseif (v77[v79[2]] < v79[4]) then
									v71 = v79[3];
								else
									v71 = v71 + 1;
								end
							elseif (v80 <= 16) then
								local v120 = 0;
								local v121;
								while true do
									if (v120 == 0) then
										v121 = v79[2];
										v77[v121] = v77[v121](v13(v77, v121 + 1, v79[3]));
										break;
									end
								end
							elseif (v80 == 17) then
								local v183 = v79[2];
								local v184 = v77[v79[3]];
								v77[v183 + 1] = v184;
								v77[v183] = v184[v79[4]];
							elseif (v77[v79[2]] == v79[4]) then
								v71 = v71 + 1;
							else
								v71 = v79[3];
							end
						elseif (v80 <= 21) then
							if (v80 <= 19) then
								local v122 = 0;
								local v123;
								while true do
									if (v122 == 0) then
										v123 = v79[2];
										v77[v123](v77[v123 + 1]);
										break;
									end
								end
							elseif (v80 > 20) then
								local v188 = v79[2];
								v77[v188](v13(v77, v188 + 1, v79[3]));
							else
								local v189 = 0;
								local v190;
								local v191;
								local v192;
								while true do
									if (v189 == 0) then
										v190 = v79[2];
										v191 = v77[v190];
										v189 = 1;
									end
									if (v189 == 1) then
										v192 = v79[3];
										for v372 = 1, v192 do
											v191[v372] = v77[v190 + v372];
										end
										break;
									end
								end
							end
						elseif (v80 <= 23) then
							if (v80 == 22) then
								local v193 = v79[2];
								local v194 = v77[v193];
								local v195 = v77[v193 + 2];
								if (v195 > 0) then
									if (v194 > v77[v193 + 1]) then
										v71 = v79[3];
									else
										v77[v193 + 3] = v194;
									end
								elseif (v194 < v77[v193 + 1]) then
									v71 = v79[3];
								else
									v77[v193 + 3] = v194;
								end
							else
								v77[v79[2]] = v79[3] ~= 0;
							end
						elseif (v80 > 24) then
							local v197 = v79[2];
							v77[v197] = v77[v197](v77[v197 + 1]);
						else
							v77[v79[2]] = {};
						end
					elseif (v80 <= 38) then
						if (v80 <= 31) then
							if (v80 <= 28) then
								if (v80 <= 26) then
									v77[v79[2]][v79[3]] = v79[4];
								elseif (v80 == 27) then
									if (v77[v79[2]] <= v77[v79[4]]) then
										v71 = v71 + 1;
									else
										v71 = v79[3];
									end
								else
									local v200 = 0;
									local v201;
									while true do
										if (v200 == 0) then
											v201 = v79[2];
											v77[v201] = v77[v201](v13(v77, v201 + 1, v79[3]));
											break;
										end
									end
								end
							elseif (v80 <= 29) then
								local v126 = 0;
								local v127;
								while true do
									if (0 == v126) then
										v127 = v79[2];
										v77[v127](v77[v127 + 1]);
										break;
									end
								end
							elseif (v80 > 30) then
								v77[v79[2]] = v77[v79[3]] / v79[4];
							else
								v77[v79[2]][v79[3]] = v77[v79[4]];
							end
						elseif (v80 <= 34) then
							if (v80 <= 32) then
								for v154 = v79[2], v79[3] do
									v77[v154] = nil;
								end
							elseif (v80 > 33) then
								v77[v79[2]] = v77[v79[3]] % v79[4];
							else
								v77[v79[2]] = v62[v79[3]];
							end
						elseif (v80 <= 36) then
							if (v80 > 35) then
								v77[v79[2]] = v79[3] ~= 0;
							else
								v77[v79[2]] = #v77[v79[3]];
							end
						elseif (v80 == 37) then
							local v210 = v79[2];
							do
								return v77[v210](v13(v77, v210 + 1, v79[3]));
							end
						else
							local v211 = v79[2];
							local v212 = v77[v211 + 2];
							local v213 = v77[v211] + v212;
							v77[v211] = v213;
							if (v212 > 0) then
								if (v213 <= v77[v211 + 1]) then
									local v379 = 0;
									while true do
										if (0 == v379) then
											v71 = v79[3];
											v77[v211 + 3] = v213;
											break;
										end
									end
								end
							elseif (v213 >= v77[v211 + 1]) then
								v71 = v79[3];
								v77[v211 + 3] = v213;
							end
						end
					elseif (v80 <= 44) then
						if (v80 <= 41) then
							if (v80 <= 39) then
								if (v79[2] == v77[v79[4]]) then
									v71 = v71 + 1;
								else
									v71 = v79[3];
								end
							elseif (v80 > 40) then
								local v216 = v79[2];
								local v217, v218 = v70(v77[v216](v77[v216 + 1]));
								v72 = (v218 + v216) - 1;
								local v219 = 0;
								for v315 = v216, v72 do
									v219 = v219 + 1;
									v77[v315] = v217[v219];
								end
							else
								v77[v79[2]] = v77[v79[3]];
							end
						elseif (v80 <= 42) then
							v77[v79[2]] = v77[v79[3]][v77[v79[4]]];
						elseif (v80 == 43) then
							local v222 = 0;
							local v223;
							local v224;
							local v225;
							while true do
								if (v222 == 0) then
									v223 = v79[2];
									v224 = {v77[v223](v77[v223 + 1])};
									v222 = 1;
								end
								if (v222 == 1) then
									v225 = 0;
									for v382 = v223, v79[4] do
										v225 = v225 + 1;
										v77[v382] = v224[v225];
									end
									break;
								end
							end
						else
							v77[v79[2]] = v77[v79[3]] * v79[4];
						end
					elseif (v80 <= 47) then
						if (v80 <= 45) then
							for v156 = v79[2], v79[3] do
								v77[v156] = nil;
							end
						elseif (v80 == 46) then
							v62[v79[3]] = v77[v79[2]];
						else
							local v229 = v79[2];
							local v230 = v77[v229];
							for v318 = v229 + 1, v79[3] do
								v7(v230, v77[v318]);
							end
						end
					elseif (v80 <= 49) then
						if (v80 > 48) then
							local v231 = v79[2];
							local v232 = v79[4];
							local v233 = v231 + 2;
							local v234 = {v77[v231](v77[v231 + 1], v77[v233])};
							for v319 = 1, v232 do
								v77[v233 + v319] = v234[v319];
							end
							local v235 = v234[1];
							if v235 then
								local v346 = 0;
								while true do
									if (v346 == 0) then
										v77[v233] = v235;
										v71 = v79[3];
										break;
									end
								end
							else
								v71 = v71 + 1;
							end
						else
							v77[v79[2]] = v77[v79[3]] + v79[4];
						end
					elseif (v80 > 50) then
						local v237 = v79[2];
						do
							return v77[v237](v13(v77, v237 + 1, v79[3]));
						end
					else
						local v238 = v79[2];
						local v239 = {v77[v238](v77[v238 + 1])};
						local v240 = 0;
						for v322 = v238, v79[4] do
							v240 = v240 + 1;
							v77[v322] = v239[v240];
						end
					end
				elseif (v80 <= 77) then
					if (v80 <= 64) then
						if (v80 <= 57) then
							if (v80 <= 54) then
								if (v80 <= 52) then
									v77[v79[2]] = {};
								elseif (v80 > 53) then
									v77[v79[2]] = v29(v68[v79[3]], nil, v62);
								else
									local v242 = 0;
									local v243;
									local v244;
									local v245;
									while true do
										if (0 == v242) then
											v243 = v79[2];
											v244 = {v77[v243](v13(v77, v243 + 1, v72))};
											v242 = 1;
										end
										if (1 == v242) then
											v245 = 0;
											for v385 = v243, v79[4] do
												v245 = v245 + 1;
												v77[v385] = v244[v245];
											end
											break;
										end
									end
								end
							elseif (v80 <= 55) then
								v77[v79[2]] = #v77[v79[3]];
							elseif (v80 > 56) then
								v77[v79[2]] = v77[v79[3]][v77[v79[4]]];
							else
								v62[v79[3]] = v77[v79[2]];
							end
						elseif (v80 <= 60) then
							if (v80 <= 58) then
								local v132 = v79[2];
								local v133 = v77[v132];
								local v134 = v79[3];
								for v158 = 1, v134 do
									v133[v158] = v77[v132 + v158];
								end
							elseif (v80 > 59) then
								if (v77[v79[2]] == v77[v79[4]]) then
									v71 = v71 + 1;
								else
									v71 = v79[3];
								end
							else
								v77[v79[2]] = v77[v79[3]] - v77[v79[4]];
							end
						elseif (v80 <= 62) then
							if (v80 > 61) then
								if not v77[v79[2]] then
									v71 = v71 + 1;
								else
									v71 = v79[3];
								end
							else
								do
									return v77[v79[2]];
								end
							end
						elseif (v80 > 63) then
							v77[v79[2]] = v77[v79[3]] / v77[v79[4]];
						else
							local v252 = v79[2];
							local v253 = v77[v252 + 2];
							local v254 = v77[v252] + v253;
							v77[v252] = v254;
							if (v253 > 0) then
								if (v254 <= v77[v252 + 1]) then
									local v388 = 0;
									while true do
										if (0 == v388) then
											v71 = v79[3];
											v77[v252 + 3] = v254;
											break;
										end
									end
								end
							elseif (v254 >= v77[v252 + 1]) then
								v71 = v79[3];
								v77[v252 + 3] = v254;
							end
						end
					elseif (v80 <= 70) then
						if (v80 <= 67) then
							if (v80 <= 65) then
								local v135 = v79[3];
								local v136 = v77[v135];
								for v161 = v135 + 1, v79[4] do
									v136 = v136 .. v77[v161];
								end
								v77[v79[2]] = v136;
							elseif (v80 == 66) then
								v77[v79[2]] = v61[v79[3]];
							elseif (v77[v79[2]] < v77[v79[4]]) then
								v71 = v71 + 1;
							else
								v71 = v79[3];
							end
						elseif (v80 <= 68) then
							local v138 = v79[3];
							local v139 = v77[v138];
							for v162 = v138 + 1, v79[4] do
								v139 = v139 .. v77[v162];
							end
							v77[v79[2]] = v139;
						elseif (v80 == 69) then
							local v258 = v79[2];
							local v259 = {v77[v258](v13(v77, v258 + 1, v72))};
							local v260 = 0;
							for v325 = v258, v79[4] do
								v260 = v260 + 1;
								v77[v325] = v259[v260];
							end
						else
							v77[v79[2]] = v77[v79[3]] % v79[4];
						end
					elseif (v80 <= 73) then
						if (v80 <= 71) then
							if v77[v79[2]] then
								v71 = v71 + 1;
							else
								v71 = v79[3];
							end
						elseif (v80 == 72) then
							if (v77[v79[2]] < v79[4]) then
								v71 = v79[3];
							else
								v71 = v71 + 1;
							end
						else
							v77[v79[2]] = v29(v68[v79[3]], nil, v62);
						end
					elseif (v80 <= 75) then
						if (v80 == 74) then
							v77[v79[2]] = v77[v79[3]][v79[4]];
						else
							do
								return v77[v79[2]];
							end
						end
					elseif (v80 > 76) then
						local v266 = v68[v79[3]];
						local v267;
						local v268 = {};
						v267 = v10({}, {__index=function(v328, v329)
							local v330 = 0;
							local v331;
							while true do
								if (0 == v330) then
									v331 = v268[v329];
									return v331[1][v331[2]];
								end
							end
						end,__newindex=function(v332, v333, v334)
							local v335 = v268[v333];
							v335[1][v335[2]] = v334;
						end});
						for v337 = 1, v79[4] do
							v71 = v71 + 1;
							local v338 = v67[v71];
							if (v338[1] == 13) then
								v268[v337 - 1] = {v77,v338[3]};
							else
								v268[v337 - 1] = {v61,v338[3]};
							end
							v76[#v76 + 1] = v268;
						end
						v77[v79[2]] = v29(v266, v267, v62);
					else
						v77[v79[2]]();
					end
				elseif (v80 <= 90) then
					if (v80 <= 83) then
						if (v80 <= 80) then
							if (v80 <= 78) then
								v77[v79[2]] = v79[3];
							elseif (v80 == 79) then
								v77[v79[2]] = v79[3];
							else
								local v272 = 0;
								local v273;
								local v274;
								local v275;
								while true do
									if (v272 == 0) then
										v273 = v68[v79[3]];
										v274 = nil;
										v272 = 1;
									end
									if (v272 == 2) then
										for v392 = 1, v79[4] do
											v71 = v71 + 1;
											local v393 = v67[v71];
											if (v393[1] == 13) then
												v275[v392 - 1] = {v77,v393[3]};
											else
												v275[v392 - 1] = {v61,v393[3]};
											end
											v76[#v76 + 1] = v275;
										end
										v77[v79[2]] = v29(v273, v274, v62);
										break;
									end
									if (v272 == 1) then
										v275 = {};
										v274 = v10({}, {__index=function(v395, v396)
											local v397 = v275[v396];
											return v397[1][v397[2]];
										end,__newindex=function(v398, v399, v400)
											local v401 = v275[v399];
											v401[1][v401[2]] = v400;
										end});
										v272 = 2;
									end
								end
							end
						elseif (v80 <= 81) then
							if (v77[v79[2]] < v77[v79[4]]) then
								v71 = v71 + 1;
							else
								v71 = v79[3];
							end
						elseif (v80 > 82) then
							local v277 = 0;
							local v278;
							while true do
								if (v277 == 0) then
									v278 = v79[2];
									do
										return v13(v77, v278, v72);
									end
									break;
								end
							end
						elseif not v77[v79[2]] then
							v71 = v71 + 1;
						else
							v71 = v79[3];
						end
					elseif (v80 <= 86) then
						if (v80 <= 84) then
							v77[v79[2]] = v61[v79[3]];
						elseif (v80 > 85) then
							if (v77[v79[2]] == v79[4]) then
								v71 = v71 + 1;
							else
								v71 = v79[3];
							end
						else
							local v279 = v79[2];
							v77[v279](v13(v77, v279 + 1, v79[3]));
						end
					elseif (v80 <= 88) then
						if (v80 == 87) then
							v77[v79[2]]();
						else
							local v280 = v79[2];
							local v281 = v77[v79[3]];
							v77[v280 + 1] = v281;
							v77[v280] = v281[v79[4]];
						end
					elseif (v80 == 89) then
						v77[v79[2]] = v77[v79[3]] - v77[v79[4]];
					else
						v77[v79[2]] = v77[v79[3]] - v79[4];
					end
				elseif (v80 <= 96) then
					if (v80 <= 93) then
						if (v80 <= 91) then
							if (v79[2] == v77[v79[4]]) then
								v71 = v71 + 1;
							else
								v71 = v79[3];
							end
						elseif (v80 > 92) then
							v71 = v79[3];
						else
							v77[v79[2]] = v77[v79[3]][v79[4]];
						end
					elseif (v80 <= 94) then
						local v145 = v79[2];
						local v146 = v79[4];
						local v147 = v145 + 2;
						local v148 = {v77[v145](v77[v145 + 1], v77[v147])};
						for v163 = 1, v146 do
							v77[v147 + v163] = v148[v163];
						end
						local v149 = v148[1];
						if v149 then
							v77[v147] = v149;
							v71 = v79[3];
						else
							v71 = v71 + 1;
						end
					elseif (v80 == 95) then
						if (v77[v79[2]] ~= v79[4]) then
							v71 = v71 + 1;
						else
							v71 = v79[3];
						end
					else
						local v293 = v79[2];
						do
							return v13(v77, v293, v293 + v79[3]);
						end
					end
				elseif (v80 <= 99) then
					if (v80 <= 97) then
						v77[v79[2]] = v77[v79[3]] + v79[4];
					elseif (v80 > 98) then
						local v294 = v79[2];
						v77[v294] = v77[v294]();
					else
						v77[v79[2]] = v77[v79[3]] * v79[4];
					end
				elseif (v80 <= 101) then
					if (v80 > 100) then
						local v297 = v79[2];
						v77[v297] = v77[v297]();
					else
						do
							return;
						end
					end
				elseif (v80 > 102) then
					v77[v79[2]] = v62[v79[3]];
				else
					v71 = v79[3];
				end
				v71 = v71 + 1;
			end
		end;
	end
	return v29(v28(), {}, v17)(...);
end
return vv9(), ...);